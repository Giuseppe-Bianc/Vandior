name: ci
on:
  pull_request:
  release:
    types: [ published ]
  push:
    tags:
    branches:
      - main
      - develop

env:
  CLANG_TIDY_VERSION: "18.1.3"
  VERBOSE: 1

jobs:
  Test:
    name: ${{matrix.os}} ${{matrix.compiler}} ${{matrix.build_type}} ${{matrix.packaging_maintainer_mode == 'ON' && '(maintainer mode)' || ''}} ${{matrix.enable_indepth == 'ON' && '(indepth)' || ''}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-22.04
          #- macos-10.15
          - windows-2019
        compiler:
          - llvm-18.1.3
          - gcc-13
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        packaging_maintainer_mode:
          - ON
          - OFF
        build_shared:
          - OFF
        enable_indepth:
          - ON
          - OFF

        exclude:
          - os: windows-2019
            compiler: llvm-18.1.3
            packaging_maintainer_mode: ON
            enable_indepth: OFF
          - os: windows-2019
            compiler: gcc-13
          #- os: macos-10.15

        include:
          - compiler: gcc-13
            gcov_executable: gcov
            enable_ipo: On
            enable_cppcheck: Off
            enable_clang_tidy: Off

          - compiler: llvm-18.1.3
            enable_ipo: Off
            gcov_executable: "llvm-cov gcov"
            enable_cppcheck: Off

          #- os: macos-10.15
          #  enable_ipo: Off

          # Set up preferred package generators, for given build configurations
          #- build_type: Release
          #  packaging_maintainer_mode: OFF
          #  package_generator: TBZ2

          # This exists solely to make sure a non-multiconfig build works
          - os: ubuntu-22.04
            compiler: gcc-13
            generator: "Unix Makefiles"
            build_type: Debug
            gcov_executable: gcov
            packaging_maintainer_mode: On
            enable_ipo: Off
            enable_cppcheck: Off

          # Windows msvc builds
          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            packaging_maintainer_mode: On
            enable_ipo: On
            enable_cppcheck: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: On
            enable_ipo: On
            enable_cppcheck: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            packaging_maintainer_mode: Off
            enable_cppcheck: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: Off
            package_generator: ZIP
            enable_cppcheck: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: On
            enable_ipo: On
            build_shared: On
            enable_cppcheck: On

          # Duplicated configurations with enable_indepth ON
          - os: ubuntu-22.04
            compiler: gcc-13
            generator: "Ninja Multi-Config"
            build_type: Release
            enable_indepth: On

          - os: ubuntu-22.04
            compiler: gcc-13
            generator: "Ninja Multi-Config"
            build_type: Debug
            enable_indepth: On

          - os: windows-2019
            compiler: llvm-18.1.3
            generator: "Ninja Multi-Config"
            build_type: Release
            enable_indepth: On

          - os: windows-2019
            compiler: llvm-18.1.3
            generator: "Ninja Multi-Config"
            build_type: Debug
            enable_indepth: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            enable_indepth: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            enable_indepth: On

    steps:
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores
      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v7.0.1
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')

      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1


      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          packaging_maintainer_mode: ${{ matrix.packaging_maintainer_mode }}
          generator: ${{ matrix.generator }}

      - name: Project Name
        uses: cardinalby/export-env-action@2.2.2
        with:
          envFile: '.github/constants.env'

      - name: Setup C++ Toolchain
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}
          doxygen: true
          graphviz: true
          cppcheck: true

          gcovr: true
          opencppcoverage: true

      - name: Update Gcov with pipx
        run: |
          pipx upgrade gcovr
          gcovr --version  # Verify gcovr is installed correctly

      - name: Configure CMake LLVM
        if: ${{ matrix.compiler == 'llvm-18.1.3' }}
        run: |
          cmake -S . -B ./build -G "${{matrix.generator}}" -D${{ env.PROJECT_NAME }}_ENABLE_CLANG_TIDY:BOOL=OFF -D${{ env.PROJECT_NAME }}_ENABLE_CPPCHECK=${{matrix.enable_cppcheck }} -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{matrix.enable_ipo }} -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -D${{ env.PROJECT_NAME }}_PACKAGING_MAINTAINER_MODE:BOOL=${{matrix.packaging_maintainer_mode}} -D${{ env.PROJECT_NAME }}_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -D${{ env.PROJECT_NAME }}_ENABLE_INDEPT:BOOL=${{matrix.enable_indepth}} -DGIT_SHA:STRING=${{ github.sha }}

      - name: Configure CMake (Non-LLVM)
        if: ${{ matrix.compiler != 'llvm-18.1.3' }}
        run: |
          cmake -S . -B ./build -G "${{matrix.generator}}" -D${{ env.PROJECT_NAME }}_ENABLE_CPPCHECK=${{matrix.enable_cppcheck }} -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{matrix.enable_ipo }} -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -D${{ env.PROJECT_NAME }}_PACKAGING_MAINTAINER_MODE:BOOL=${{matrix.packaging_maintainer_mode}} -D${{ env.PROJECT_NAME }}_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -D${{ env.PROJECT_NAME }}_ENABLE_INDEPT:BOOL=${{matrix.enable_indepth}} -DGIT_SHA:STRING=${{ github.sha }}
      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}} --parallel ${{ steps.cpu-cores.outputs.count }}


      #- name: Create Coverage Directory
      #  run: mkdir -p ./out/coverage

      - name: Unix - Test and coverage
        if: runner.os != 'Windows'
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}} -j ${{ steps.cpu-cores.outputs.count }} --rerun-failed --output-on-failure
          gcovr -j ${{env.nproc}} --verbose --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}' --exclude-unreachable-branches --exclude-noncode-lines --gcov-ignore-errors=no_working_dir_found

#  gcovr -j ${{env.nproc}} --verbose --root ../ --config ../gcovr.cfg --gcov-executable '${{ matrix.gcov_executable }}' --exclude-unreachable-branches --exclude-noncode-lines --gcov-ignore-errors=no_working_dir_found

      - name: Windows - Test and coverage
        if: runner.os == 'Windows'
        working-directory: ./build
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}


      #- name: CPack
      #  if: matrix.package_generator != ''
      #  working-directory: ./build
      #  run: |
      #    cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}

      #- name: Publish Tagged Release
      #  uses: softprops/action-gh-release@v2
      #  if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
      #  with:
      #    files: |
      #      build/*-*${{ matrix.build_type }}*-*.*

      # out/cobertura.xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5.3.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ${{ runner.os == 'Windows' &&  './build/coverage.xml' || './out/cobertura.xml' }}
