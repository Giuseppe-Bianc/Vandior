fun funzione(num: i8[][2]): i8[2], Derived {
	println("Funzione:\t{}", num)
	var s: string = "CCCCC"
	var d: Derived
	return {1, 2}, d
}
fun func(): char {
	return 'c'
}
fun func(num: u64): char, bool {
	return 'a', true
}

/*
multi
line
comment
*/
const nume: u32 = 334 + #o3444 // line comment
const nume: u32 = #334affff * #o234567
const num2: u32 = nume
const dmnum : f64 = 1.222222222222f * num2 + nume
const testComplex: c64 = 2.3if + 45.1 + 34.5i + dmnum * 1i
const boolc: bool = 1 == 1 || !false && 67 < 77.85
main {
	var warn1: f64 = 2
	var warn2: f64 = warn1
	warn2 = warn1
	for var i: i32 = 0, args.size() {
		println(args[i])
	}
	var complexValue1: c32 = -4.5f + 4if
	println("c32:\t{}", complexValue1)
	var complexValue2: c64 = 4i
	println("c64:\t{}", complexValue2)
	var integer: i8 = 3
	print("{}", integer)
	var obj1, obj2: Object = Object(), Derived()
	println("Before first swap:\t{} {}", obj1, obj2)
	obj1, obj2 = obj2, obj1
	println("After first swap:\t{} {}", obj1, obj2)
	var s1: string = "Ciao"
	var s2, s3: string = obj1.fs(), s1
	println("Before second swap:\t{} {}", s2, s3)
	s2, s3 = s3, s2
	println("After second swap:\t{} {}", s2, s3)
	s1, s2 = "AA", "VV"
	println("{} {}", s3, s2)
	var array1, array2: Object[] = {Object(), Object()}, {Derived(), Object()} 
	var array3, array4: Derived[2] = {Derived(), Derived()} 
	var num: u8 = 5
	var num1: f64 = 90.56 % 3.45
	var octNum: i64 = #o2222
	var hexNum: i64 = #2323
	if(true) {
		if(num == 2) {
			println("2")
		} else if(num % 2 == 0) {
			println("Pari")
		} else if(num == 1) {
			println("1")
		} else {
			println("Dispari")
		}
		while(num1 > 0) {
			num1 -= num / 1.5
			println("num1:\t{}", num1)
		}
	} else {
		while(false) {}
	}
	for num = num + 3 ^ 4, 100, 1 + 1 {
		println("for 1:\t{}", num)
	}
	for var i: i8 = 45.43 ^ (num / num1), -100, -1 {
		if(i < 0 && i > -50) {
			continue
		}
		println("for 2:\t{}", i)
	}
	for var i: f32 = 0.4, 5.6 {
		println("for 3:\t{}", i)
	}
	for num = 1, 10, 10 {}
	for var j: f32 = 1, 10 {}
	while(true) {
		var s: string = readLine()
		if(s.upper() == "END") {
			exit(0)
		}
		if(s.lower() == "exit") {
			break
		}
		println(s.lower())
		println(s.upper())
	}
	array1[0 ^ 1] = Object()
	array1[-1].a = 45
	println("{}", array1[-1 ^ 1].a)
	var fnum: f64 = 20213412.32
	fnum ^= 10 / 2 ^ 2 ^ 3.4
	println("{}", fnum)
	var maxI: i64
	var maxF: f64
	maxI, maxF = max({})
	println("{} {}", maxI, maxF)
	var arg: i8[][2]
	_, _ = funzione(arg)
	var character: char = func()
	character, _ = func(10)
	var pi: f64 = PI
	println("{} {} {} {} {}", pi, PI, TAU, E, INF)
	println("{} {} {} {}", sqrt(4), sin(PI), cos(PI), tan(PI))
	println("{} {} {} {}", asin(0), acos(0), atan(PI), atan2(PI, TAU))
	println("{} {} {}", sinh(PI), cosh(PI), tanh(PI))
	println("{} {} {} {} {}", pi, PI, TAU, E, INF)
	println("{} {} {} {}", sqrt(4), sin(PI), cos(PI), tan(PI))
	println("{} {} {} {}", asin(0), acos(0), atan(PI), atan2(PI, TAU))
	println("{} {} {}", sinh(PI), cosh(PI), tanh(PI))
	println("{} {} {} {} {}", pi, PI, TAU, E, INF)
	println("{} {} {} {}", sqrt(4), sin(PI), cos(PI), tan(PI))
	println("{} {} {} {}", asin(0), acos(0), atan(PI), atan2(PI, TAU))
	println("{} {} {}", sinh(PI), cosh(PI), tanh(PI))
	println("{} {} {} {} {}", pi, PI, TAU, E, INF)
	println("{} {} {} {}", sqrt(4), sin(PI), cos(PI), tan(PI))
	println("{} {} {} {}", asin(0), acos(0), atan(PI), atan2(PI, TAU))
	println("{} {} {}", sinh(PI), cosh(PI), tanh(PI))
	println("{} {} {} {} {}", pi, PI, TAU, E, INF)
	println("{} {} {} {}", sqrt(4), sin(PI), cos(PI), tan(PI))
	println("{} {} {} {}", asin(0), acos(0), atan(PI), atan2(PI, TAU))
	println("{} {} {}", sinh(PI), cosh(PI), tanh(PI))
	println("{} {} {} {} {}", pi, PI, TAU, E, INF)
	println("{} {} {} {}", sqrt(4), sin(PI), cos(PI), tan(PI))
	println("{} {} {} {}", asin(0), acos(0), atan(PI), atan2(PI, TAU))
	println("{} {} {}", sinh(PI), cosh(PI), tanh(PI))
}