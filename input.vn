var variable, variable2: int[]
main {
	const v1, v2: int = 1, 2
	{
	}
}
/*main {
	var variable: bool
	variable = .1
	const constant: int[] = [12, "Ciao", true || 12 > variable + (12 / 3 * true), variable--], [[12, 5], [7, 6, 'b'], []]
	var num1, num2: type[12 + a / 2][] = 1 + 1 + "AAAA".len(), variable.method("Ciao", .24e-15) * -5 + "String"[variable.m() - 1 + "Ciao"[0]]
	variable = 42 * -y + 1. + 1.0 + 1e+1 + "10"
	variable[1]++ = -4
}
//main {}
variable.method().a++, variable2--, ciao.a()

var variable2, variable3: type = variable[0 + true && (!false || '\n')] == -4, !variable[2][true]['a' / "HELLO"]-- && 7.2
variable = variable < -4
variable += 4
variable.len().a, variable2[0], variable3, function(1, 2).method()[0]()[2][1]('c')[0].b[0] = function().method()[0]()[2][1]('\r', false), 1, 2, variable2[0][3].method(params)
//Comment
variable -= -4. + ( // Single line comment
	12 + 56 && (1 + 2) == 3 &&
	variable2++ == true ||
	!variable >= 10
)
variable = variable-- && -4.5
variable = true
{
	variable = !false || !true
	variable = ''
	variable = '\n'
	variable = 'n'
	variable, variable2 = !l > 2 && l <= !10 || !10 && 4 > 10, -2 && true
	{
		variable = !a + (12 - 34) / (12) && () + (-12 * 5.6) ^ ((!12) -12 + 12)
	}
	const variable, variable2: type = 7 * 5 != (1 <= (4 == !5) * 1 && (12 != b)), 12
}
if(a + (b * C) || (a >= v)) {
	a = a + (!b && c)
}
a, b = "Ciao
adqdqw
dqwd" + 1, true -
"CIAOdq
dqd"
while(true) {
}
for i = [1, 3] {
}
for var i: int = 1 + a[2] - (10 / -20 * 30 -a[2][4] && !b), 12 - i {
}
for var i: int = (1 * (1 || b)), [1, 2, 3], 5 {}
function(1, b(345)[1], !variable, a || b[1][3]((9-8) ^ -3, [1, 2, 3], a - b ^ c(4, 5)))
a, b, c = function() + function("Ciao", 2 == 1, f > c), -function(45) && !function('A') * d, d
fun function() {
	return 1, a < 2, function(10)[12], [4, 5, 6], 5 && (12 < 7) || !12 < function(12) - b
}
fun function(var1: type, var2: type): type1, type2 {
	variable = 12
	return
}
variable = function().method().a
variable %= a[0].method(-45, true, function().b[0], [1, 2, 4, variable[1]][0].value([1,2 , [4, 5]], 4, [[2, 2], [3, 3]])) % 2*/