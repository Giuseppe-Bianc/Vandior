const variable, variable2: bool = 1 == #f2 && 1 + 3 <= -6.57 + #o7 ^ 2 || false, !true <= false
const intVar: int = 2 + testPar(_test() ^ 7 + 6, 78.78)
var _var: int
main {
	var testArray: int[1 + 2]
	var array: int[][5 - 1 ^ 4]
	var obj: Object = createObject()
	var v1, v2: float = 1 + 2 + _var + testPar(-intVar, intVar), 2 * 56 *(65 + 8.98 ^ 1 + testPar(6 / 7 + testPar(1, 3), 1 + 5) + (35 + 56 -67 / 7)) + 2 / intVar
	const variable, variable2: char = 'c', 'V'
	var s, s2: string = "Ciao", args[0]
	var c1, c2: char = s[0], "Ciao"[1 ^ -5]
	var s3, s4: int = testPar(s), testPar("Text")
	var pow, div: float = 1 ^ 2 ^ 3 ^ (1 + 5) ^ _test()	, 1 / 2 / s4 + 5
	var powDiv, divPow: int = 1 ^ 2 / 3 ^ 4 / 5, 1 / 2 ^ testPar("Ciao") / (4.5 + 7) ^ (5 ^ 8) ^ testPar("a") ^ 8.98 ^ 67
	var testObj: int = obj.a ^ createObject().a + - obj.a ^ -2 ^ -3 + - 1 / createObject().a / -3
	var testObjFun: float = obj.f(pow) + createObject().f(67.5) ^ - obj.f(-56) ^ -2 ^ -3 + - 1 / createObject().f(-div) / -3 ^ obj.f(4)
	var testSize: int = obj.s.size() + "Ciao".size() + obj.fs().size() - ("Ciao").size() + array[1  / 3 + array[1 - 7][6 ^ 7] ^ "Ciao".size() / s3 ^ createObject().a][1] + array.size() / array[1].size()
	{
	}
}
var ar: int[][] = {{_test(), 2, 3, 6}, {"Ciao".size(), -4}}
var a: int = ar[1 ^ 4 ^ testPar(1, 4)][7]