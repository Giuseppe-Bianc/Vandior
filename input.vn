var obj: Object = createObject()
var der1: Derived
var der: Derived = createDerived()
var pol: Object = createDerived()
const variable, variable2: bool = 1 == #f2 && 1 + 3 <= -6.57 + #o7 ^ 2 || false, !true <= false || createDerived()._derivedConst
const testConstInt1, testConstInt2: int = 1 + 2 ^ 5 / (6 - 7), (56 / 28) ^ createObject().c
const testConstFloat1, testConstFloa2: float = 1.3 + 2 ^ 5 * 3 + testConstInt2 + (- testConstInt2 + 1), 10 ^ obj.c + createDerived().c
const testConstChar: char = 'a'
const testConstString: string = "Ciao"
const testArray: int[] = {1, 2, 3, -5}
val testArray1: int[4] = testArray
val vec: int[] = testArray
var intVar: int = 2 + testPar(_test() ^ 7 + 6, 78.78) ^ testConstInt1 + testArray[1] + testArray1.size()
var _var: int = 1, obj.a, testArray1[2]
main {
	var _var2, intVar2: int = 2, 10 / _var++ + der.a
	intVar++
	var t: int = intVar2 -- + der.f(45.5)
	var testArray: int[1 + 2] = {1, 2, 3}, {1, 2}
	var array: int[][5 - 1 ^ 4]
	var v1, v2: float = 1 + 2 + _var + testPar(-intVar, intVar), 2 * 56 *(65 + 8.98 ^ 1 + testPar(6 / 7 + testPar(1, 3), 1 + 5) + (35 + 56 -67 / 7)) + 2 / intVar
	val variable, variable2: char = 'c', 'V'
	var s, s2: string = "Ciao", args[0]
	var c1, c2, c3: char = s[0], variable
	var s3, s4: int = testPar(s), testPar("Text")
	var pow, div: float = 1 ^ 2 ^ 3 ^ (1 + 5) ^ _test()	, 1 / 2 / s4 + 5
	var powDiv, divPow: int = 1 ^ 2 / 3 ^ 4 / 5, 1 / 2 ^ testPar("Ciao") / (4.5 + 7) ^ (5 ^ 8) ^ testPar("a") ^ 8.98 ^ 67
	var testObj: int = obj.a ^ createObject().a + - obj.a ^ -2 ^ -3 + - 1 / createObject().a / -3
	val testObjFun: float = obj.f(pow) + createObject().f(67.5) ^ - obj.f(-56) ^ -2 ^ -3 + - 1 / createObject().f(-div) / -3 ^ obj.f(4)
	var testSize: int = obj.s.size() + "Ciao".size() + obj.fs().size() - ("Ciao").size() + array[1  / 3 + array[1 - 7][6 ^ 7] ^ "Ciao".size() / s3 ^ createObject().a][1] + array.size() / array[1].size()
	{
	}
}
var ar: int[][] = {{_test(), 2, 3, 6}, {"Ciao".size(), -4}}
var a: int = ar[1 ^ 4 ^ testPar(1, 4)][7] + ar[0].size()
var objArray: Object[] = { createObject(), createObject() }
var _a: int = objArray[0].c
val b: bool = der.derivedFun(obj) && !createDerived().derivedFun(der) || der.derivedFun(createDerived())